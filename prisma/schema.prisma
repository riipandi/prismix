// SET TIME ZONE 'UTC';
generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity", "fullTextSearch"]
}

datasource db {
    provider             = "postgresql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model User {
    id              String          @id @default(uuid())
    email           String          @unique
    username        String?         @unique
    firstName       String          @map("firstname")
    lastName        String          @map("lastname")
    avatarUrl       String?         @map("avatar_url")
    emailVerifiedAt DateTime?       @map("email_verified_at")
    createdAt       DateTime        @default(now()) @map("created_at")
    updatedAt       DateTime        @updatedAt @map("updated_at")
    password        Password?
    socialAccounts  SocialAccount[]
    sessions        Session[]
    notes           Note[]

    @@map("users")
}

model Password {
    hash   String
    userId String @unique @map("user_id")
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@map("passwords")
}

model Session {
    id          String    @id
    userId      String    @map("user_id")
    sessionData Json      @map("session_data") @db.Json
    expires     Int?      @db.Integer
    expiresAt   DateTime? @map("expires_at") @db.Timestamptz
    userAgent   String?   @map("user_agent")
    ipAddress   String?   @map("ip_address")
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map("sessions")
}

model SocialAccount {
    id                    String  @id @default(cuid())
    userId                String  @map("user_id")
    accountType           String  @map("account_type")
    provider              String
    providerAccountId     String  @map("provider_account_id")
    refreshToken          String? @map("refresh_token")
    refreshTokenExpiresIn Int?    @map("refresh_token_expires_in")
    accessToken           String? @map("access_token")
    expiresAt             Int?    @map("expires_at")
    tokenType             String? @map("token_type")
    scope                 String?
    idToken               String? @map("id_token")
    sessionState          String? @map("session_state")
    oAuthTokenSecret      String? @map("oauth_token_secret")
    oAuthToken            String? @map("oauth_token")
    user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@map("social_accounts")
}

model Note {
    id        String   @id @default(cuid())
    userId    String   @map("user_id")
    title     String
    summary   String
    body      String
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@map("notes")
}
